package vn.edu.fpt.chessgame.logic;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.NonNull;

import com.google.firebase.database.*;

import java.util.Random;

import vn.edu.fpt.chessgame.model.Match;
import vn.edu.fpt.chessgame.model.MatchCreatedListener;

public class OnlineChessManager {

    private final DatabaseReference matchRefRoot;
    private final Context context;
    private MatchCreatedListener listener;



    public OnlineChessManager(Context ctx) {
        this.context = ctx;
        matchRefRoot = FirebaseDatabase.getInstance(
                "https://chessgame-e626e-default-rtdb.asia-southeast1.firebasedatabase.app/"
        ).getReference("matches");
    }
    public void setMatchCreatedListener(MatchCreatedListener l) {
        this.listener = l;
    }
    // üü¢ T·∫°o ph√≤ng m·ªõi
    public void createMatch(String player1Id) {
        String matchId = generateRoomCode(); // V√≠ d·ª• t·∫°o m√£ ph√≤ng: "3472"

        Match match = new Match(player1Id);
        matchRefRoot.child(matchId).setValue(match)
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        show("‚úÖ Ph√≤ng ƒë√£ t·∫°o: " + matchId);
                        if (listener != null) {
                            listener.onMatchCreated(matchId);
                        }
                    } else {
                        show("‚ùå L·ªói t·∫°o ph√≤ng!");
                    }
                });
    }

    private String generateRoomCode() {
        Random random = new Random();
        int code = 1000 + random.nextInt(9000); // T·∫°o s·ªë t·ª´ 1000‚Äì9999
        return String.valueOf(code);
    }



    // üîµ Tham gia ph√≤ng b·∫±ng ID
    public void joinMatch(@NonNull String matchId, @NonNull String player2Id) {
        DatabaseReference matchRef = matchRefRoot.child(matchId);
        matchRef.child("blackPlayer").setValue(player2Id);
        matchRef.child("status").setValue("ongoing");
        show("‚úÖ ƒê√£ tham gia ph√≤ng: " + matchId);
    }


    // ‚ôüÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n c·ªù v√† l∆∞·ª£t ƒëi
    public void sendMove(@NonNull String matchId, @NonNull String boardState, @NonNull String nextTurn) {
        DatabaseReference matchRef = matchRefRoot.child(matchId);
        matchRef.child("board").setValue(boardState);
        matchRef.child("turn").setValue(nextTurn);
    }

    // üëÄ L·∫Øng nghe c·∫≠p nh·∫≠t v√°n c·ªù
    public void listenMatch(@NonNull String matchId, ValueEventListener listener) {
        matchRefRoot.child(matchId).addValueEventListener(listener);
    }

    // üèÅ C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt th√∫c tr·∫≠n
    public void endMatch(@NonNull String matchId, @NonNull String winnerUid) {
        DatabaseReference matchRef = matchRefRoot.child(matchId);
        matchRef.child("status").setValue("finished");
        matchRef.child("winner").setValue(winnerUid);
    }

    private void show(String msg) {
        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();
        Log.d("OnlineChessManager", msg);
    }
    public void sendSurrender(String matchId) {
        DatabaseReference ref = FirebaseDatabase.getInstance()
                .getReference("matches")
                .child(matchId);

        ref.child("status").setValue("surrendered");
        // C√≥ th·ªÉ th√™m: ref.child("endedBy").setValue("localTest");
    }

}
